Client.js:
// Utility: Terminal Log Function
function logToTerminal(message, isError = false) {
  const terminalLog = document.getElementById("terminal-log");
  const line = document.createElement("div");

  const timestamp = new Date().toLocaleTimeString();
  line.textContent = `[${timestamp}] ${isError ? "ERROR: " : ""}${message}`;
  line.style.color = isError ? "red" : "green";

  terminalLog.appendChild(line);
  terminalLog.scrollTop = terminalLog.scrollHeight; // Auto-scroll to the latest log
}

// Attendance Management
function clockIn() {
  try {
    const now = new Date();
    const status = `Clocked in at ${now.toLocaleTimeString()}`;
    document.getElementById("attendance-status").textContent = status;
    logToTerminal(status);
  } catch (error) {
    logToTerminal("Failed to clock in: " + error.message, true);
  }
}

function clockOut() {
  try {
    const now = new Date();
    const status = `Clocked out at ${now.toLocaleTimeString()}`;
    document.getElementById("attendance-status").textContent = status;
    logToTerminal(status);
  } catch (error) {
    logToTerminal("Failed to clock out: " + error.message, true);
  }
}

// Leave Management
document.getElementById("leave-form").addEventListener("submit", (event) => {
  event.preventDefault(); // Prevent page reload

  try {
    const leaveType = document.getElementById("leave-type").value;
    const leaveStart = document.getElementById("leave-start").value;
    const leaveEnd = document.getElementById("leave-end").value;

    // Validate inputs
    if (!leaveType || !leaveStart || !leaveEnd) {
      const error = "Please fill out all fields before submitting.";
      document.getElementById("leave-status").textContent = error;
      logToTerminal(error, true);
      return;
    }

    const startDate = new Date(leaveStart);
    const endDate = new Date(leaveEnd);

    if (startDate > endDate) {
      const error = "Leave start date cannot be after the end date.";
      document.getElementById("leave-status").textContent = error;
      logToTerminal(error, true);
      return;
    }

    // Display confirmation message
    const success = `Leave application submitted for ${leaveType} from ${leaveStart} to ${leaveEnd}.`;
    document.getElementById("leave-status").textContent = success;
    logToTerminal(success);
  } catch (error) {
    logToTerminal("Failed to submit leave application: " + error.message, true);
  }
});

// Utility: Reset attendance or leave status
function resetStatus() {
  try {
    document.getElementById("attendance-status").textContent = "";
    document.getElementById("leave-status").textContent = "";
    logToTerminal("Status reset successfully.");
  } catch (error) {
    logToTerminal("Failed to reset status: " + error.message, true);
  }
}

// Example DOM elements for testing
document.body.innerHTML = `
  <div>
    <h2>Attendance Management</h2>
    <button onclick="clockIn()">Clock In</button>
    <button onclick="clockOut()">Clock Out</button>
    <p id="attendance-status"></p>
  </div>

  <div>
    <h2>Leave Management</h2>
    <form id="leave-form">
      <label for="leave-type">Leave Type:</label>
      <select id="leave-type">
        <option value="">--Select Leave Type--</option>
        <option value="Casual Leave">Casual Leave</option>
        <option value="Sick Leave">Sick Leave</option>
        <option value="Annual Leave">Annual Leave</option>
      </select><br><br>

      <label for="leave-start">Leave Start Date:</label>
      <input type="date" id="leave-start"><br><br>

      <label for="leave-end">Leave End Date:</label>
      <input type="date" id="leave-end"><br><br>

      <button type="submit">Submit Leave Application</button>
    </form>
    <p id="leave-status"></p>
  </div>

  <button onclick="resetStatus()">Reset Status</button>

  <div id="terminal" style="margin-top: 20px; background-color: black; color: white; font-family: monospace; padding: 10px; height: 200px; overflow-y: auto;">
    <h3>Terminal Logs</h3>
    <div id="terminal-log" style="overflow-y: auto; max-height: 150px;"></div>
  </div>
`;
index.html:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>E-HRMS - System Status and Testing</title>
  <link rel="stylesheet" href="style.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      background-color: #f4f4f9;
    }
    header {
      background: #007bff;
      color: #fff;
      padding: 10px;
      text-align: center;
    }
    section {
      margin: 20px 0;
      padding: 20px;
      border: 1px solid #ddd;
      background: #fff;
      border-radius: 8px;
    }
    button {
      padding: 10px 15px;
      border: none;
      background: #007bff;
      color: #fff;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background: #0056b3;
    }
    .status-bar {
      padding: 10px;
      margin: 10px 0;
      border-radius: 5px;
    }
    .success {
      background-color: #d4edda;
      color: #155724;
    }
    .error {
      background-color: #f8d7da;
      color: #721c24;
    }
    .info {
      background-color: #cce5ff;
      color: #004085;
    }
    .hidden {
      display: none;
    }
    #record-list {
      margin-top: 20px;
      padding: 10px;
      background: #fff;
      border-radius: 8px;
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #ddd;
    }
  </style>
</head>
<body>
  <header>
    <h1>E-HRMS - System Status and Testing</h1>
  </header>

  <section>
    <h2>Submit a Test Record</h2>
    <form id="test-record-form">
      <label for="name">Name:</label>
      <input type="text" id="name" name="name" required><br><br>
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required><br><br>
      <button type="submit">Save to Server</button>
    </form>
    <div id="record-status" class="status-bar hidden"></div>
  </section>

  <section>
    <h2>Current Records</h2>
    <div id="record-list">Loading records...</div>
  </section>

  <script>
    const API_BASE = "https://ehrms.onrender.com/api";

    async function fetchRecords() {
      try {
        const response = await fetch(`${API_BASE}/records`);
        const data = await response.json();
        console.log("Fetched Records:", data);

        if (response.ok && data.records) {
          const recordList = document.getElementById("record-list");
          if (data.records.length > 0) {
            recordList.innerHTML = data.records
              .map(record => `<div>${record.name} - ${record.email}</div>`)
              .join('');
          } else {
            recordList.innerHTML = "No records found.";
          }
        } else {
          document.getElementById("record-list").innerHTML = "Failed to load records.";
        }
      } catch (error) {
        console.error("Error fetching records:", error);
        document.getElementById("record-list").innerHTML = `Error: ${error.message}`;
      }
    }

    document.getElementById("test-record-form").addEventListener("submit", async (e) => {
      e.preventDefault();
      const name = document.getElementById("name").value;
      const email = document.getElementById("email").value;
      const recordStatus = document.getElementById("record-status");
      recordStatus.className = "status-bar info";
      recordStatus.textContent = "Saving record...";
      try {
        const response = await fetch(`${API_BASE}/test-record`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, email })
        });
        const data = await response.json();
        if (response.ok) {
          recordStatus.className = "status-bar success";
          recordStatus.textContent = "Record saved successfully!";
          fetchRecords();
        } else {
          recordStatus.className = "status-bar error";
          recordStatus.textContent = `Failed to save record: ${data.message}`;
        }
      } catch (error) {
        recordStatus.className = "status-bar error";
        recordStatus.textContent = `Error: ${error.message}`;
      }
    });
package.json:
{
  "name": "ehrms-backend",
  "version": "1.0.0",
  "description": "Backend server for EHRMS",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "mongoose": "^7.0.0",
    "multer": "^1.4.5-lts.1",
    "winston": "^3.8.1",
    "winston-daily-rotate-file": "^4.7.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
    fetchRecords();
  </script>
</body>
</html>

